Class --> Class is a blueprint or template or group of entities that share common
          properties and behaviour.

          For example, let's consider a class called "Car". This class defines the properties and behaviors that all cars have in common, such as the number of doors, the make and model, the color, and the ability to accelerate, brake, and turn.

          Once we define the Car class, we can create individual car objects based on that class. Each car object is an instance of the Car class, with its own unique set of values for the properties defined in the class.

          For example, we could create a red Ford Mustang with two doors as one instance of the Car class, and a blue Toyota Camry with four doors as another instance of the Car class.

Instance --> An instance of a class is a specific object that is created based on the class
             blueprint.
             Each instance of a class has its own unique set of values for the properties defined in the class.

             For example, let's consider a class called "Person". This class defines the properties and behaviors that all people have in common, such as name, age, and the ability to walk and talk.

             Once we define the Person class, we can create individual person objects based on that class. Each person object is an instance of the Person class, with its own unique values for the properties defined in the class.


Object --> Object is a real world enitiy that has their own data in the form of properties
           and behaviour in the form of methods.
           The data is stored in object's properties and behaviour define in object methods

           An object is an instance of that class, with its own unique set of values for the properties and set of behaviour for methods that defined in the class.

This keyword --> Basically this (special java reserve)keyword refer to the current object who
                 invoke the class at that time.

Accessing the member of a class --> We can access the memeber of class using (.)dot operator
                                    with object.

Setter/Getter --> Setter are used to set the value of data member of class.
                  Basically setter/Getter are using when we use private access modifiers
                  But here we set data member value using methods.
                  For example:
                  We have a class called BankAccount.Also we have password data member
                  So we don't want anyone can access or change password.We want 
                  who can access or change password their user only.

                  So we can sort of criteria to check whether the user is genuine or not
                  So we pass their information in setter method to verify  before changing 

                  Setter for modifiers or changing the data.
                  Getter for view the data.

Static keyword --> Static keyword refer that member is belong to class itself, not to object.
                   We can access static member without creating an object.
                   We cannot called static member from non-static function.
                   Static is helpful when sometime is common for all example:
                   School name are common for all student so create variable for everyone 
                   only once.Not to create for every single student;
                   All object refer the School name static variable

Encapsulation --> It is the process of hiding the implementation detail of
                  object and show the necessary information.It can be
                  achieved by access modifiers such as public,private,
                  protected etc.

Inheritance --> Inheritance is the process of creating new classes from 
                existing classes. The new class inherits the properties and behaviors of the existing class and can add its own properties and behaviors.
        
Type of Inheritance:

1. Single inheritance: In this type of inheritance, a subclass can inherit 
   properties and methods from only one superclass. 
   For example, if we have a class called "Animal" and a subclass called "Dog", the "Dog" class can only inherit from the "Animal" class.

2. Multilevel inheritance is a type of inheritance where a subclass inherits
   from a superclass, and this superclass is itself a subclass of another superclass, and so on.
   For example, if we have a class called "Animal", a subclass called "Mammal", and another subclass called "Dog", the "Dog" class can inherit properties and methods from both the "Mammal" class and the "Animal" class.

3. Hierarchical inheritance: In this type of inheritance, multiple 
   subclasses can inherit from the same superclass. 
   For example, if we have a class called "Animal" and two subclasses called "Dog" and "Cat", both the "Dog" and "Cat" classes can inherit properties and methods from the "Animal" class.

4. Multiple inheritance: In this type of inheritance, a subclass can inherit
   properties and methods from multiple superclasses. This type of inheritance is not supported in all programming languages, including Java.
   In Java, you can achieve similar functionality using interfaces, which are like contracts that a class can implement.

Polymorphism --> It is a concept that allows you to use a single function or
                 method in different ways. In simpler terms, it means that the same function can be used with different inputs to produce different outputs.
Types:

1.Compile-Time(Method overloading): It occurs when multiple methods in a 
                                    class have the same name but different parameter types.
We can achieve method overloading by 
1.chaning parameter
2.change data types

2. Run-Time(method overriding): It occurs when a method in a subclass has 
                                the same name, return type, and parameters as a method in its superclass.
                        
Abstraction --> Abstraction in Java refers to the process of hiding the implementation details 
                of an object and show only what is necessary. This is done by using abstract classes and interfaces.
                An abstract class is a class that cannot be directly used to create objects but can be used as a blueprint for other classes. 
                It can have methods that are declared but not defined, which are called abstract methods.
                An interface is like a contract that defines a set of methods that a class should implement.

Interface -->  Interfaces in Java can also be thought of as blueprints for classes. They define the methods and fields that 
               a class must have in order to implement the interface.

# Class cannot be private or protected because:
   1. Not usable bcz can't able to create object